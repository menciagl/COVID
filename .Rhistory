) |>
mutate(
age_inf = str_extract(age_sex, "^[0-9]+"), # we create age_inf
age_up = str_extract(age_sex, "(?<=-)[0-9]+"), #we create age_up
sex = str_extract(age_sex, "(?<=_)[A-Za-z]+"), #we create sex
age_inf = as.numeric(age_inf),
age_up = as.numeric(age_up)
) |>
#special cases like "80+" and "NC"
mutate(
age_up = ifelse(str_detect(age_sex, "\\+"), NA, age_up), #NA if the format includes "+"
age_inf = ifelse(str_detect(age_sex, "^NC"), NA, age_inf), #NA if it's "NC"
age_up = ifelse(str_detect(age_sex, "^NC"), NA, age_up),    #NA if it's "NC"
sex = ifelse(sex == "NC", NA, sex) #NA if it's "NC"
)
#| eval: true
tidy_covid <- tidy_covid |>
mutate(
month_year = paste0(month(fecha), "-", year(fecha)))
#| eval: true
url <- "https://es.wikipedia.org/wiki/ISO_3166-2:ES#Provincias!"
prop_ISO <- read_html(url)
prop_ISO <- html_table(prop_ISO, fill=TRUE)
colnames(prop_ISO) <- gsub(" ", "_", colnames(prop_ISO))
colnames(prop_ISO) <- gsub("[[:punct:]]", "", colnames(prop_ISO))
#| eval: true
url <- "https://es.wikipedia.org/wiki/ISO_3166-2:ES#Provincias!"
prop_ISO <- read_html(url)
prop_ISO <- html_table(prop_ISO, fill=TRUE)
prop_ISO <- as_tibble(prop_ISO[[2]])
View(prop_ISO)
colnames(prop_ISO) <- gsub(" ", "_", colnames(prop_ISO))
colnames(prop_ISO) <- gsub("[[:punct:]]", "", colnames(prop_ISO))
prop_ISO <- prop_ISO |>
rename(provincia = NombredelasubdivisiónenlaISO1,
CCAA = Comunidadautónoma)
head (prop_ISO)
prop_ISO <- prop_ISO |>
mutate(
provincia = gsub("\\[nota \\d+\\]​?", "", provincia),
provincia = gsub("\\s?\\(.*?\\)", "", provincia),
provincia = trimws(provincia),
Código = gsub("\\[nota \\d+\\]​?", "", Código),
Código = gsub("\\s?\\(.*?\\)", "", Código),
Código = trimws(Código),
Código = gsub("ES-", "", Código))
head (prop_ISO)
#| eval: true
tidy_covid_vals <- unique(tidy_covid$provincia_iso)
prop_ISO_vals <- unique(prop_ISO$Código)
# Values of tidy_covid that aren't in prop_ISO: CE, ML, NC, missings (NA)
tidy_covid_vals[!tidy_covid_vals %in% prop_ISO_vals]
#Values of prop_ISO that aren't in tidy_covid: NA
prop_ISO_vals[!prop_ISO_vals %in% tidy_covid_vals] #NA
# Join (we add CE, ML and NC):
final_data <- tidy_covid |>
left_join(prop_ISO, by = c("provincia_iso" = "Código")) |>
mutate(
provincia = case_when(
provincia_iso == "CE" ~ "Ceuta",
provincia_iso == "ML" ~ "Melilla",
provincia_iso == "NC" ~ "NC",
TRUE ~ provincia
),
CCAA = case_when(
provincia_iso == "CE" ~ "CE",
provincia_iso == "ML" ~ "ML",
provincia_iso == "NC" ~ "NC",
TRUE ~ CCAA
)
)
#| eval: true
summary_cases <- final_data |>
group_by(provincia_iso, month_year) |>
summarise(
total_cases = sum(cases, na.rm = TRUE),
num_days = n_distinct(fecha),
daily_cases = total_cases / num_days,
ungroup ()  #Avoid the groups from being there after summarizing
) |>
#Join with province table for full province name
left_join(prop_ISO, by = c("provincia_iso" = "Código")) |>
select(provincia, month_year, daily_cases, provincia_iso)
#| eval: true
summary_cases <- final_data |>
group_by(provincia_iso, month_year) |>
summarise(
total_cases = sum(cases, na.rm = TRUE),
num_days = n_distinct(fecha),
daily_cases = total_cases / num_days |>
ungroup ()  #Avoid the groups from being there after summarizing
) |>
#Join with province table for full province name
left_join(prop_ISO, by = c("provincia_iso" = "Código")) |>
select(provincia, month_year, daily_cases, provincia_iso)
#| eval: true
summary_cases <- final_data |>
group_by(provincia_iso, month_year) |>
summarise(
total_cases = sum(cases, na.rm = TRUE),
num_days = n_distinct(fecha),
daily_cases = total_cases / num_days,
.groups = "drop"  #Avoid the groups from being there after summarizing
) |>
#Join with province table for full province name
left_join(prop_ISO, by = c("provincia_iso" = "Código")) |>
select(provincia, month_year, daily_cases, provincia_iso)
View(final_data)
View(prop_ISO)
rm(list = ls()) # Remove old variables
library(tidyverse)
library(readxl)
library (tidyverse)
library (dplyr)
library(microbenchmark)
library(rvest)
library (datapasta)
library (zoo)
#| eval: true
data <- read_excel("messy_covid_data.xlsx")
#| eval: true
data <- read_excel("messy_covid_data.xlsx")
head (data)
#| eval: true
tidy_covid <- data |>
pivot_longer(
cols = -c(provincia_iso, fecha), # Keep these columns
names_to = "age_sex",
values_to = "cases"
) |>
mutate(
age_inf = str_extract(age_sex, "^[0-9]+"), # we create age_inf
age_up = str_extract(age_sex, "(?<=-)[0-9]+"), #we create age_up
sex = str_extract(age_sex, "(?<=_)[A-Za-z]+"), #we create sex
age_inf = as.numeric(age_inf),
age_up = as.numeric(age_up)
) |>
#special cases like "80+" and "NC"
mutate(
age_up = ifelse(str_detect(age_sex, "\\+"), NA, age_up), #NA if the format includes "+"
age_inf = ifelse(str_detect(age_sex, "^NC"), NA, age_inf), #NA if it's "NC"
age_up = ifelse(str_detect(age_sex, "^NC"), NA, age_up),    #NA if it's "NC"
sex = ifelse(sex == "NC", NA, sex) #NA if it's "NC"
)
#| eval: true
tidy_covid <- tidy_covid |>
mutate(
month_year = paste0(month(fecha), "-", year(fecha)))
#| eval: true
url <- "https://es.wikipedia.org/wiki/ISO_3166-2:ES#Provincias!"
prop_ISO <- read_html(url)
prop_ISO <- read_html(url)
prop_ISO <- html_table(prop_ISO, fill=TRUE)
colnames(prop_ISO) <- gsub(" ", "_", colnames(prop_ISO))
colnames(prop_ISO) <- gsub("[[:punct:]]", "", colnames(prop_ISO))
#| eval: true
url <- "https://es.wikipedia.org/wiki/ISO_3166-2:ES#Provincias!"
prop_ISO <- read_html(url)
prop_ISO <- html_table(prop_ISO, fill=TRUE)
colnames(prop_ISO) <- gsub(" ", "_", colnames(prop_ISO))
#| eval: true
tidy_covid <- data |>
pivot_longer(
cols = -c(provincia_iso, fecha), # Keep these columns
names_to = "age_sex",
values_to = "cases"
) |>
mutate(
age_inf = str_extract(age_sex, "^[0-9]+"), # we create age_inf
age_up = str_extract(age_sex, "(?<=-)[0-9]+"), #we create age_up
sex = str_extract(age_sex, "(?<=_)[A-Za-z]+"), #we create sex
age_inf = as.numeric(age_inf),
age_up = as.numeric(age_up)
) |>
#special cases like "80+" and "NC"
mutate(
age_up = ifelse(str_detect(age_sex, "\\+"), NA, age_up), #NA if the format includes "+"
age_inf = ifelse(str_detect(age_sex, "^NC"), NA, age_inf), #NA if it's "NC"
age_up = ifelse(str_detect(age_sex, "^NC"), NA, age_up),    #NA if it's "NC"
sex = ifelse(sex == "NC", NA, sex) #NA if it's "NC"
)
head (tidy_covid)
#| eval: true
tidy_covid <- tidy_covid |>
mutate(
month_year = paste0(month(fecha), "-", year(fecha)))
head (tidy_covid)
#| eval: true
url <- "https://es.wikipedia.org/wiki/ISO_3166-2:ES#Provincias!"
prop_ISO <- read_html(url)
prop_ISO <- html_table(prop_ISO, fill=TRUE)
prop_ISO <- as_tibble(prop_ISO[[2]])
colnames(prop_ISO) <- gsub(" ", "_", colnames(prop_ISO))
colnames(prop_ISO) <- gsub("[[:punct:]]", "", colnames(prop_ISO))
prop_ISO <- prop_ISO |>
rename(provincia = NombredelasubdivisiónenlaISO1,
CCAA = Comunidadautónoma)
head (prop_ISO)
prop_ISO <- prop_ISO |>
mutate(
provincia = gsub("\\[nota \\d+\\]​?", "", provincia),
provincia = gsub("\\s?\\(.*?\\)", "", provincia),
provincia = trimws(provincia),
Código = gsub("\\[nota \\d+\\]​?", "", Código),
Código = gsub("\\s?\\(.*?\\)", "", Código),
Código = trimws(Código),
Código = gsub("ES-", "", Código))
#| eval: true
tidy_covid_vals <- unique(tidy_covid$provincia_iso)
prop_ISO_vals <- unique(prop_ISO$Código)
# Values of tidy_covid that aren't in prop_ISO: CE, ML, NC, missings (NA)
tidy_covid_vals[!tidy_covid_vals %in% prop_ISO_vals]
#Values of prop_ISO that aren't in tidy_covid: NA
prop_ISO_vals[!prop_ISO_vals %in% tidy_covid_vals] #NA
# Join (we add CE, ML and NC):
final_data <- tidy_covid |>
left_join(prop_ISO, by = c("provincia_iso" = "Código")) |>
mutate(
provincia = case_when(
provincia_iso == "CE" ~ "Ceuta",
provincia_iso == "ML" ~ "Melilla",
provincia_iso == "NC" ~ "NC",
TRUE ~ provincia
),
CCAA = case_when(
provincia_iso == "CE" ~ "CE",
provincia_iso == "ML" ~ "ML",
provincia_iso == "NC" ~ "NC",
TRUE ~ CCAA
))
#| eval: true
summary_cases <- final_data |>
group_by(provincia_iso, month_year) |>
summarise(
total_cases = sum(cases, na.rm = TRUE),
num_days = n_distinct(fecha),
daily_cases = total_cases / num_days,
.groups = "drop"  #Avoid the groups from being there after summarizing
) |>
#Join with province table for full province name
left_join(prop_ISO, by = c("provincia_iso" = "Código")) |>
select(provincia, month_year, daily_cases, provincia_iso)
print (summary_cases)
#| eval: true
prov_allowed <- c("M", "B", "V", "SE", "Z", "MA")
summ_by_dates_prov <- function(prov_codes, data_table) {
data_table |>
filter(provincia_iso %in% prov_codes) |> #Filter provinces
mutate(month_year = format(fecha, "%m-%Y")) |>
group_by(provincia_iso, month_year) |> #Calculate the total cases and the number of unique days per group
summarise(
total_cases = sum(cases, na.rm = TRUE),
num_days = n_distinct(fecha),
daily_avg_cases = total_cases / num_days,
.groups = "drop"
)
}
result <- summ_by_dates_prov(prov_allowed, final_data)
#| eval: true
prov_allowed <- c("M", "B", "V", "SE", "Z", "MA")
summ_by_dates_prov <- function(prov_codes, data_table) {
data_table |>
filter(provincia_iso %in% prov_codes) |> #Filter provinces that coincide with prov_codes
mutate(month_year = format(fecha, "%m-%Y")) |>
group_by(provincia_iso, month_year) |> #Calculate the total cases and the number of unique days per group
summarise(
total_cases = sum(cases, na.rm = TRUE),
num_days = n_distinct(fecha),
daily_avg_cases = total_cases / num_days,
.groups = "drop"
)
}
result <- summ_by_dates_prov(prov_allowed, final_data)
result <- summ_by_dates_prov(prov_allowed, final_data)
print(result)
#| eval: true
final_data <- final_data |>
mutate(
provincia_iso = ifelse(is.na(provincia_iso), "NA", provincia_iso),
provincia = ifelse(provincia_iso == "NA", "Navarra", provincia),
CCAA = ifelse(provincia_iso == "NA", "NA", CCAA)
)
#| eval: true
#Unknown sex
total_cases <- nrow(final_data)
unknown_sex <- sum(is.na(final_data$sex) | final_data$sex == "NC")
prop_unknown_sex <- unknown_sex/ total_cases
print (prop_unknown_sex)
#| eval: true
#Unknown sex
total_cases <- nrow(final_data)
unknown_sex <- sum(is.na(final_data$sex))
prop_unknown_sex <- unknown_sex/ total_cases
print (prop_unknown_sex)
#| eval: true
#Unknown province
unknown_province <- sum(is.na(final_data$provincia_iso) | final_data$provincia_iso == "NC")
prop_unknown_province <- unknown_province/ total_cases
print (prop_unknown_province)
#| eval: true
#Now we  eliminate such records if the number of cases represents less than 1% (for each) in the database
final_data_1 <- final_data |>
filter(!(is.na(sex)) | prop_unknown_sex > 0.01)
final_data_1 <- final_data_1 |>
filter(!(is.na(provincia_iso) | provincia_iso == "NC") | prop_unknown_province > 0.01)
#| eval: true
province_cases <- final_data |>
group_by(provincia_iso) |>
summarise(total_cases = sum(cases, na.rm = TRUE)) |>
arrange(desc(total_cases))
province_cases |>
head(7)
#| eval: true
province_sex_cases <- final_data |>
group_by(provincia_iso, sex) |>
summarise(total_cases = sum(cases, na.rm = TRUE)) |>
filter(!is.na(sex)) |>
arrange(provincia_iso, sex, desc(total_cases))
head(province_sex_cases)
View(province_sex_cases)
#| eval: true
library(datapasta)
population <- tibble::tribble(
~provincia, ~poblacion,
"Total",  47385107,
"Albacete",    386464,
"Alacant/Alicante",   1881762,
"Almería",    731792,
"Araba/Álava",    333626,
"Asturias",   1011792,
"Ávila",    158421,
"Badajoz",    669943,
"Balears Illes",   1173008,
"Barcelona",   5714730,
"Bizkaia",   1154334,
"Burgos",    356055,
"Cáceres",    389558,
"Cádiz",   1245960,
"Cantabria",    584507,
"Castellón/Castelló",    587064,
"Ciudad Real",    492591,
"Córdoba",    776789,
"Coruña A",   1120134,
"Cuenca",    195516,
"Gipuzkoa",    726033,
"Girona",    786596,
"Granada",    921338,
"Guadalajara",    265588,
"Huelva",    525835,
"Huesca",    224264,
"Jaén",    627190,
"León",    451706,
"Lleida",    439727,
"Lugo",    326013,
"Madrid",   6751251,
"Málaga",   1695651,
"Murcia",   1518486,
"Navarra",    661537,
"Ourense",    305223,
"Palencia",    159123,
"Palmas Las",   1128539,
"Pontevedra",    944275,
"Rioja La",    319796,
"Salamanca",    327338,
"Santa Cruz de Tenerife",   1044405,
"Segovia",    153663,
"Sevilla",   1947852,
"Soria",     88747,
"Tarragona",    822309,
"Teruel",    134545,
"Toledo",    709403,
"Valencia/València",   2589312,
"Valladolid",    519361,
"Zamora",    168725,
"Zaragoza",    967452,
"Ceuta",     83517,
"Melilla",     86261
)
#| eval: true
final_data_vals <- unique(final_data$provincia)
population_vals <- unique(population$provincia)
# Values of final_data that aren't in population: A Coruña, Las Palmas, NC, València/Valencia, Castelló/Castellón, La Rioja, Balears
final_data_vals[!final_data_vals %in% population_vals]
#Values of population that aren't in final_data: Total, castellón/Castelló, Palmas Las, Valencia/València, Balears Illes, Coruña A, Rioja La
population_vals[!population_vals %in% final_data_vals]
equivalences <- c(
"A Coruña" = "Coruña A",
"Las Palmas" = "Palmas Las",
"NC" = "NC",
"València/Valencia" = "Valencia/València",
"Castelló/Castellón" = "Castellón/Castelló",
"La Rioja" = "Rioja La",
"Balears" = "Balears Illes"
)
#| eval: true
final_data <- final_data |>
mutate(provincia = ifelse(provincia %in% names(equivalences),
equivalences[provincia],
provincia))
final_data <- final_data |>
left_join(population, by = "provincia")
head(final_data)
View(final_data)
View(final_data)
#| eval: true
#Cumulative incidence
cum_incidence <- function(cases, k, poblacion){
cases <- as.numeric(cases)
poblacion <- as.numeric(poblacion)
rollsum_cases <- rollsum(cases, k, fill = NA, align = "right")
incidence <- (rollsum_cases / poblacion) * 100000
return(incidence)
}
#Function applied
final_data <- final_data |>
group_by(provincia, age_group, sex) |>
mutate(
cum_incidence_14d = cum_incidence(cases, k = 14, poblacion = poblacion)
) |>
ungroup()
View(final_data)
#| eval: true
final_data <- final_data |>
separate(age_sex, into = c("age_group", "sexo"), sep = "_", remove = FALSE) |> #create variable "age_group"
group_by(provincia_iso, age_group, sex, fecha) |>
mutate(cum_cases = cumsum(cases)) |>
ungroup() |>
select (-sexo)
#| eval: true
#Cumulative incidence
cum_incidence <- function(cases, k, poblacion){
cases <- as.numeric(cases)
poblacion <- as.numeric(poblacion)
rollsum_cases <- rollsum(cases, k, fill = NA, align = "right")
incidence <- (rollsum_cases / poblacion) * 100000
return(incidence)
}
#Function applied
final_data <- final_data |>
group_by(provincia, age_group, sex) |>
mutate(
cum_incidence_14d = cum_incidence(cases, k = 14, poblacion = poblacion)
) |>
ungroup()
#| eval: true
final_data_filtered <- final_data |>
filter(age_group == "80+",
sex == "M",
fecha <= "2022-03-01")
#revisar
final_data_filtered |>
arrange(desc(cum_incidence_14d)) |>
group_by(provincia) |>
top_n(5, cum_incidence_14d)
#| eval: true
final_data_filtered <- final_data |>
filter(age_group == "80+",
sex == "M",
fecha <= "2022-03-01")
final_data_filtered |>
arrange(desc(cum_incidence_14d)) |>
group_by(provincia) |>
top_n(5, cum_incidence_14d)
#| eval: true
#First we want to see the evolution of the incidence rate of COVID-19
covid_data <- final_data |>
mutate(
tasa_incidencia = (cases / poblacion) * 100000,
month_year_new = as.Date(paste0(year(fecha), "-", month(fecha), "-01"))
)
ggplot(covid_data, aes(x = month_year_new, y = tasa_incidencia, color = sex)) +
geom_line() +
labs(title = "Evolution of the incidence rate of COVID-19",
x = "Month",
y = "Incidence rate per 100,000 inhabitants") +
theme_minimal() +
scale_x_date(date_labels = "%b-%Y", date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(covid_data, aes(x = month_year_new, y = tasa_incidencia, color = sex)) +
geom_line() +
labs(title = "Evolution of the incidence rate of COVID-19",
x = "Month",
y = "Incidence rate per 100,000 inhabitants") +
theme_minimal() +
scale_x_date(date_labels = "%b-%Y", date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#| eval: true
#First we want to see the evolution of the incidence rate of COVID-19
covid_data <- final_data |>
mutate(
tasa_incidencia = (cases / poblacion) * 100000,
month_year_new = as.Date(paste0(year(fecha), "-", month(fecha), "-01"))) |>
filter(!is.na(sex))
ggplot(covid_data, aes(x = month_year_new, y = tasa_incidencia, color = sex)) +
geom_line() +
labs(title = "Evolution of the incidence rate of COVID-19",
x = "Month",
y = "Incidence rate per 100,000 inhabitants") +
theme_minimal() +
scale_x_date(date_labels = "%b-%Y", date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(covid_data)
#| eval: true
province_cases <- covid_data |>
group_by(provincia) |>
summarise(
total_cases = sum(cases, na.rm = TRUE),
population = unique(poblacion),
incidence_rate = (total_cases / population) * 100000
) |>
arrange(desc(incidence_rate))
head (province_cases)
